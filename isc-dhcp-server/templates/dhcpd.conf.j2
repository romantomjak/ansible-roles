# {{ ansible_managed }}. Created on {{ template_run_date }}

# option definitions common to all supported networks...
#option domain-name "example.org";
#option domain-name-servers ns1.example.org, ns2.example.org;

{% if isc_dhcp_server_authoritative %}
# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;
{% endif %}

default-lease-time {{ isc_dhcp_server_default_lease_time }};
max-lease-time {{ isc_dhcp_server_max_lease_time }};

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style {{ isc_dhcp_server_ddns_update_style }};
update-optimization {{ (isc_dhcp_server_update_optimization == true) | ternary('on', 'off') }};
update-static-leases {{ (isc_dhcp_server_update_static_leases == true) | ternary('on', 'off') }};

# can be useful if you have systems with e.g. both wireless and wired
# connections, and you occasionally switch between the two. This allows
# a new record with the same hostname to override the old one, even if
# the MAC address of the client's network interface is not the same.
update-conflict-detection {{ (isc_dhcp_server_update_conflict_detection == true) | ternary('on', 'off') }};

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
#log-facility local7;

{% for key in isc_dhcp_server_tsig_keys %}
key {{ key.name }} {
  algorithm {{ key.algorithm }};
  secret {{ key.secret }};
}

{% endfor %}

{% for zone in isc_dhcp_server_zones %}
zone {{ zone.name }} {
  primary {{ zone.primary }};
  key {{ zone.key }};
}

{% endfor %}

{% for subnet in isc_dhcp_server_subnets %}
subnet {{ subnet.net }} netmask {{ subnet.mask }} {
{% if subnet.range is defined %}
  range {{ subnet.range }};
{% endif %}
{% if subnet.broadcast is defined %}
  option broadcast-address {{ subnet.broadcast }};
{% endif %}
{% if subnet.routers is defined %}
{% if subnet.routers | type_debug == "list" %}
  option routers {{ subnet.routers | join(', ') }};
{% else %}
  option routers {{ subnet.routers }};
{% endif %}
{% endif %}
{% if subnet.dns is defined %}
  option domain-name-servers {{ subnet.dns }};
{% endif %}
{% if subnet.domain is defined %}
  option domain-name "{{ subnet.domain }}";
{% endif %}
{% if subnet.ddns_updates is defined %}
  ddns-updates {{ (subnet.ddns_updates == true) | ternary('on', 'off') }};
{% endif %}
}

{% endfor %}

{% for host in isc_dhcp_server_hosts %}
host {{ host.hostname }} {
{% if host.mac is defined %}
  hardware ethernet {{ host.mac }};
{% endif %}
  fixed-address {{ host.ip }};
}

{% endfor %}
