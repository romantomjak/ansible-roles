---
# Override these in playbook with 'vars:' block

# Consul is supported on amd64 and arm64 architectures
consul_architecture: amd64

# Controls whether an agent is in server or client mode.
consul_agent_type: server

# The data center in which the agent is running. In most cases, a Consul
# datacenter is a single physical datacenter or a cloud region. The underlying
# philosophy is that a Consul datacenter is a LAN construct and is optimized
# for LAN latency. 
consul_datacenter: dc1

# Designates the datacenter which is authoritative for ACL information,
# intentions and is the root Certificate Authority for Connect.
consul_primary_datacenter: "{{ consul_datacenter }}"

# The data directory for the agent to store state. This is required for all
# agents. The directory should be durable across reboots.
consul_data_dir: /opt/consul

# The number of Consul servers you will use; three or five is recommended for
# reliable Raft consensus algorithm operation.
consul_bootstrap_expect: 3

# Specifies if the agent should log to syslog.
consul_enable_syslog: false

# The secret key to use for encryption of Consul network traffic.
consul_encrypt: Luj2FZWwlt8475wD1WtwUQ==

# The addresses of upstream DNS servers that are used to recursively resolve
# queries when Consul is used as the DNS server for a node. If the record is 
# outside of the "consul." domain, the query will be resolved upstream.
consul_recursors:

# Addresses of other agents to join upon starting up. By default, the agent
# won't join any nodes when it starts up.
consul_retry_join:

# The address that should be bound to for internal cluster communications.
# By default, Consul will bind to all addresses on the local machine and
# will advertise the private IPv4 address to the rest of the cluster.
consul_bind_addr: 0.0.0.0

# The address to which Consul will bind client interfaces, including the HTTP,
# HTTPS, gRPC and DNS servers. By default, allowing only loopback connections.
consul_client_addr: 127.0.0.1

# Nested dictionary that allows setting the bind ports. Setting a port to -1
# disables the port. See https://www.consul.io/docs/agent/options.html#ports
consul_ports:
  dns: 8600
  http: 8500
  https: -1
  grpc: -1
  serf_lan: 8301
  serf_wan: 8302
  server: 8300
  sidecar_min_port: 21000
  sidecar_max_port: 21255
  expose_min_port: 21500
  expose_max_port: 21755

# Enables the built-in web UI server.
consul_ui_enabled: false

# Controls whether Connect features are enabled on this agent. Should be enabled
# on all servers in the cluster in order for Connect to function properly.
consul_connect_enabled: false

# Enables ACLs.
consul_acl_enabled: false

# Determines whitelist or blacklist mode
# In "allow" mode, ACLs are a blacklist: any operation not specifically
# prohibited is allowed. In "deny" mode, ACLs are a whitelist: any operation
# not specifically allowed is blocked
consul_acl_default_policy: allow

# In the case that a policy or token cannot be read from the primary_datacenter
# Can be either "allow", "deny", "extend-cache" or "async-cache".
consul_acl_down_policy: extend-cache

# Enables tokens set using the API to be persisted to disk and reloaded when an
# agent restarts.
consul_acl_enable_token_persistence: false

# Only used for servers in the primary_datacenter.
# This token will be created with management-level permissions if it does not
# exist. It allows operators to bootstrap the ACL system with a token ID that
# is well-known.
consul_acl_initial_management_token: b1gs33cr3t

# The acl_agent_token is a special token that is used for an agent's internal 
# operations. It isn't used directly for any user-initiated operations.
consul_acl_agent_token: fe3b8d40-0ee0-8783-6cc2-ab1aa9bb16c1

# PEM-encoded certificate authority. The certificate authority is used to check
# the authenticity of client and server connections.
consul_tls_ca_cert: |
  -----BEGIN CERTIFICATE-----
  MIIC7TCCApSgAwIBAgIRALZdfWD3r9Hqrb2ctthPYBgwCgYIKoZIzj0EAwIwgbkx
  CzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNj
  bzEaMBgGA1UECRMRMTAxIFNlY29uZCBTdHJlZXQxDjAMBgNVBBETBTk0MTA1MRcw
  FQYDVQQKEw5IYXNoaUNvcnAgSW5jLjFAMD4GA1UEAxM3Q29uc3VsIEFnZW50IENB
  IDI0MjQwNDkyMTgyNDQ1NzgzNjQxNDA4Mjc4MzQ0OTAzNjMxNjY5NjAeFw0yMjAx
  MTMyMjQ1NDNaFw0yNzAxMTIyMjQ1NDNaMIG5MQswCQYDVQQGEwJVUzELMAkGA1UE
  CBMCQ0ExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xGjAYBgNVBAkTETEwMSBTZWNv
  bmQgU3RyZWV0MQ4wDAYDVQQREwU5NDEwNTEXMBUGA1UEChMOSGFzaGlDb3JwIElu
  Yy4xQDA+BgNVBAMTN0NvbnN1bCBBZ2VudCBDQSAyNDI0MDQ5MjE4MjQ0NTc4MzY0
  MTQwODI3ODM0NDkwMzYzMTY2OTYwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASi
  DSKqHegBlt0oL3ZGsKzQZ+3jD7a8i785fQHqEhO0pQsbYOkmi7L8VNnVD1ObkvEy
  hbcfWCwCR9cFEWNRxCU4o3sweTAOBgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUw
  AwEB/zApBgNVHQ4EIgQg8JE1womIfxaK50HUnQPqVFjkZFFsdGrJ30XhjYIaud4w
  KwYDVR0jBCQwIoAg8JE1womIfxaK50HUnQPqVFjkZFFsdGrJ30XhjYIaud4wCgYI
  KoZIzj0EAwIDRwAwRAIgdmn4LqIojUQQ4EF4Vb48bkyh6aM5dTuiCz/kUO73jUwC
  IHabLvNYzdfeibh0ORS88KEkfV5H4zPB+1gdxYO4Ndl/
  -----END CERTIFICATE-----

# PEM-encoded private key of certificate authority. Any certificate signed
# by the CA will be allowed to communicate with the cluster and a specially
# crafted certificate signed by the CA can be used to gain full access to
# Consul. Keep this private
consul_tls_ca_key: |
  -----BEGIN EC PRIVATE KEY-----
  MHcCAQEEIPZmhG5oD27+HFfBmfn3WxzNXI7/yif15XFtkr0yMmi3oAoGCCqGSM49
  AwEHoUQDQgAEog0iqh3oAZbdKC92RrCs0Gft4w+2vIu/OX0B6hITtKULG2DpJouy
  /FTZ1Q9Tm5LxMoW3H1gsAkfXBRFjUcQlOA==
  -----END EC PRIVATE KEY-----
