---
# Override these in playbook with 'vars:' block

# Controls whether an agent is in server or client mode.
consul_agent_type: server

# The data center in which the agent is running. In most cases, a Consul
# datacenter is a single physical datacenter or a cloud region. The underlying
# philosophy is that a Consul datacenter is a LAN construct and is optimized
# for LAN latency. 
consul_agent_datacenter: dc1

# Designates the datacenter which is authoritative for ACL information,
# intentions and is the root Certificate Authority for Connect.
consul_agent_primary_datacenter: "{{ consul_agent_datacenter }}"

# The data directory for the agent to store state. This is required for all
# agents. The directory should be durable across reboots.
consul_agent_data_dir: /opt/consul

# The number of Consul servers you will use; three or five is recommended for
# reliable Raft consensus algorithm operation.
consul_agent_bootstrap_expect: 3

# Specifies if the agent should log to syslog.
consul_agent_enable_syslog: false

# The secret key to use for encryption of Consul network traffic.
consul_agent_encrypt: Luj2FZWwlt8475wD1WtwUQ==

# The addresses of upstream DNS servers that are used to recursively resolve
# queries when Consul is used as the DNS server for a node. If the record is 
# outside of the "consul." domain, the query will be resolved upstream.
consul_agent_recursors:

# Addresses of other agents to join upon starting up. By default, the agent
# won't join any nodes when it starts up.
consul_agent_retry_join:

# The address that should be bound to for internal cluster communications.
# By default, Consul will bind to all addresses on the local machine and
# will advertise the private IPv4 address to the rest of the cluster.
consul_agent_bind_addr: 0.0.0.0

# The address to which Consul will bind client interfaces, including the HTTP,
# HTTPS, gRPC and DNS servers. By default, allowing only loopback connections.
consul_agent_client_addr: 127.0.0.1

# Nested dictionary that allows setting the bind ports. Setting a port to -1
# disables the port. See https://www.consul.io/docs/agent/options.html#ports
consul_agent_ports:

# Enables the built-in web UI server.
consul_agent_ui_enabled: false

# Controls whether Connect features are enabled on this agent. Should be enabled
# on all servers in the cluster in order for Connect to function properly.
consul_agent_connect_enabled: false

# Enables ACLs.
consul_agent_acl_enabled: false

# Determines whitelist or blacklist mode
# In "allow" mode, ACLs are a blacklist: any operation not specifically
# prohibited is allowed. In "deny" mode, ACLs are a whitelist: any operation
# not specifically allowed is blocked
consul_agent_acl_default_policy: allow

# In the case that a policy or token cannot be read from the primary_datacenter
# Can be either "allow", "deny", "extend-cache" or "async-cache".
consul_agent_acl_down_policy: extend-cache

# Only used for servers in the primary_datacenter. This token will be created
# with management-level permissions if it does not exist. It allows operators
# to bootstrap the ACL system with a token ID that is well-known.
consul_agent_acl_initial_management_token: b1gs33cr3t

# The agent token is a special token that is used for an agent's internal 
# operations. It isn't used directly for any user-initiated operations. When
# this token is not provided and ACLs are enabled, a unique token will be
# generated for each agent and applied to it's configuration.
consul_agent_acl_agent_token: 

# Default token to use for client requests where no token is supplied. This is
# often configured with read-only access to services to enable DNS service
# discovery on agents. When not provided, ACLs for service DNS resolution will
# be assigned to the Anonymous token.
consul_agent_acl_token_default: 

# The path to a PEM-encoded certificate authority. The certificate authority is
# used to check the authenticity of client and server connections.
consul_agent_ca_file:

# The path to a PEM-encoded certificate. The certificate is provided to clients
# or servers to verify the agent's authenticity.
consul_agent_cert_file:

# The path to a PEM-encoded private key. The key is used with the certificate to
# verify the agent's authenticity.
consul_agent_key_file:
