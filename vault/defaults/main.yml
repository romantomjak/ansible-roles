---
# Override these in playbook with 'vars:' block

# The Vault version to install
vault_version: 1.3.1

# Disables the server from executing the mlock syscall.
# mlock prevents memory from being swapped to disk. Disabling mlock is not 
# recommended unless the systems running Vault only use encrypted swap or
# do not use swap at all.
vault_disable_mlock: true

# Specifies the Consul ACL token with permission to read and write from the
# path in Consul's key-value store. See readme.
vault_consul_token: b1gs33cr3t

# Specifies the path to the CA certificate used for Consul communication. This
# should be set according to the ca_file setting in Consul.
vault_consul_tls_ca_file: 

# Specifies the path to the certificate for Consul communication. This should
# be set according to the cert_file setting in Consul.
vault_consul_tls_cert_file: 

# Specifies the path to the private key for Consul communication. This should
# be set according to the key_file setting in Consul.
vault_consul_tls_key_file: 

# Specifies the interface to bind to for listening.
# This is used in conjunction with vault_bind_seq for automatic
# configuration of api_address and cluster_address parameters.
vault_bind: eth0

# Index for an IP for the interface defined in vault_bind.
# This is useful if your interface has more than one IP.
vault_bind_seq: 1

# Specifies if TLS will be disabled. Vault assumes TLS by default, so you must
# explicitly disable TLS to opt-in to insecure communication.
vault_tls_disable: true

# PEM-encoded certificate authority. The certificate authority is used to check
# the authenticity of client and server connections. Pass this as a variable to
# the role. The cert is hardcoded only for easy bootstrapping of tls encryption.
nomad_tls_ca_cert: |
  -----BEGIN CERTIFICATE-----
  MIIBgTCCASagAwIBAgIJAMJ261Ud7StqMAoGCCqGSM49BAMCMBMxETAPBgNVBAMM
  CFZhdWx0IENBMB4XDTIyMDExNzAwMTg1OVoXDTI3MDExNjAwMTg1OVowEzERMA8G
  A1UEAwwIVmF1bHQgQ0EwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATuh1VkDTFM
  +n74uckuz/9a5jcoZwr8Mwy3s4EN21l6xFcSlh3qnuTAYQCpr8x4nuVYwZt62G9b
  yFw0po6Y10Y6o2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAd
  BgNVHQ4EFgQU1owmKlRcbuBr/91TvyHFD+FZC7IwHwYDVR0jBBgwFoAU1owmKlRc
  buBr/91TvyHFD+FZC7IwCgYIKoZIzj0EAwIDSQAwRgIhAMMVFAagj9Wbz/G5zr7n
  fEQklzdcNEp6QBhLQ4tEL40HAiEA4c2OMAUzeR6OgB+2dOL/pyvJXKLYNT9P7guS
  2gLHNPc=
  -----END CERTIFICATE-----

# PEM-encoded private key of certificate authority. Any certificate signed
# by the CA will be allowed to communicate with the cluster and a specially
# crafted certificate signed by the CA can be used to gain full access to
# Consul. Keep this private, for example in an ansible-vault. Pass this as
# a variable to the role.The key is hardcoded here for easy bootstrapping
# of tls encryption.
nomad_tls_ca_key: |
  -----BEGIN EC PRIVATE KEY-----
  MHcCAQEEIG6rcdkNYV2GZx8qbIyNnbASR4BELnNrU8mrAkXUJAUUoAoGCCqGSM49
  AwEHoUQDQgAE7odVZA0xTPp++LnJLs//WuY3KGcK/DMMt7OBDdtZesRXEpYd6p7k
  wGEAqa/MeJ7lWMGbethvW8hcNKaOmNdGOg==
  -----END EC PRIVATE KEY-----
